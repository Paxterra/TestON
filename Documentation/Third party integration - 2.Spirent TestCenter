Spirent Test Center With TestON

In StcTest the driver will create a handle to stc library and access the StcPython file inside
that. By using StcDriver api's will execute the api's inside the STC python file.
The drivers written in the TestON are strictly using python script.
The Spirent TestCenter Automation API provides a powerful syntax that allows you to combine
object and attribute references to create and manipulate your test configuration.The syntax for a
call to a Spirent TestCenter Automation function uses one of the following formats:
functionName objectReference[–attributeReference[...]]
functionName[value[...]]
function names: one of the function names defined for API
Example: create
get
config
For aceesing spirent STC you need create a handle to StcPython inside the Spirent library.
Self.handle = StcPython()
The above mentioned function will create the handle to Spirent Stcpython there we can acess the
all python libraries
To execute the Spirent Test you need to upload Spirent library inside the TestON “lib”
folder
Object, Attribute, and Relation References :
1) Creating Objects : Object Type Names and Paths
2) Referencing Objects : Object Handles
3) Referencing Objects : Object paths
4) Relation References
Creating Objects: Object Type Names and Paths
When you create Spirent TestCenter objects, you specify the type of object to be created.
For example:
MyProject = self.handle.create(project)
This call to create produces a single object (type Project) and returns a handle to that object
You can also create a set of objects in a single call to the create function by specifying anobject
type path name. Path names are sequences of object type names, separated by dots.To use a path
name with the create function, you must create the new objects under anexisting object.
For example:
router = stc.create(BgpRouterConfig , under = project)
Referencing Objects: Object Handles
In many cases, when you call Spirent TestCenter Automation functions, you either provide or
obtain an object handle. A handle is a string value that identifies a Spirent TestCenter Automation
object. Object handles are the links between your application and the object hierarchy maintained
by Spirent TestCenter API. Object handles are valid for the lifetime of the object.
In some circumstances, Spirent TestCenter will create objects on your behalf. Each object
description in the Spirent TestCenter Automation Object Reference lists the associated
automatic objects.
Spirent TestCenter Automation creates a handle when you create an object in your configuration.
When you call the create function, the object handle is the return value from the function:
Project_handle = stc.create(project,name = 'BgpTest')
When the create function returns, the variable project_handle is set to the value of the object handle
for the newly created Project object. Your application can then use the object handle to refer to the
newly created object in other calls to Spirent TestCenter Automation functions.
Note : when you create an object, you must always specify the parent object handle.
Using Object Handles :
To identify the parent for a new object. With the exception of the Project object, you must specify a
parent when you create an object.
For example: port = stc.handle.create (Port,under = project_handle)
In this example,the 'under' attribute specifies the Project object handle as the parent for the new Port
object. The create function returns the handle for the Port object; you use this object handle as the
parent for StreamBlock objects or other objects that are children of a Port object.
Referencing Objects: Object Paths
You can use path name notation to reference objects and object attributes in your test hierarchy.
The path name references shorten the command line and reduce the need to search for handles to
access objects.
When you use the API, a function call identifies an object, or it identifies an object and one (or
more) of its attributes. For example:
stc.handle.delete (port)
stc.handle.config (port,location= "//10.100.0.1/1/1")
CLI level :
Currently we can run StcTest in CLI level on TestON FrameWork.
In CLI level we can run all api's inside the stc driver on command line prompt.
And those functions will execute and call the Stc library inside the TestON “lib” folder. After
executing the test, the traffic results will be stored in bin folder inside the TestON.
The trffic results will be stored in the .csv formated files as per Stc libraries. In TestON 'stcdriver'
we can retrive and assert the each and every result generated by STC Test on STC by using
“parseresults” api inside the 'stcdriver'
def parseresults(self,Attribute,CsvFile) :
try :
     main.log.info("parsing the CSV file for the traffic results")
     totalrows = len(open('/home/TestON/bin/Untitled/'+CsvFile).readlines())
     fp = open("/home/TestON/bin/Untitled/"+CsvFile,'Ur')
     data_list = []
     attributes=[]
     attribute_values=[]
     for line in fp:
      data_list.append(line.strip().split(','))
      attribute_values=data_list[totalrows-1]
      attributes=data_list[totalrows-3]
      for index in range (0,100) :
       if attributes[index]==Attribute:
       main.log.info("Given Attribute Name is:'"+Attribute+"'")
       main.log.info("Attribute value is:'"+attribute_values[index]+"'")
       result = attribute_values[index]
       if result == '0' :
          main.log.info("Traffic is not generated on this attribute :"+Attribute)
          return main.FALSE
       else :
          return result
main.log.info("parsing the CSV file for the traffic results")
