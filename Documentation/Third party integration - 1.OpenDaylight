OpenDaylight Controller

Introduction of OpenDaylight Controller:

Software Defined Network (SDN) is a new way of deploying network infrastructure.Central to the SDN effort is the Controller which provides the ability to deploy software to control the network gear and redeploy as needed.The vision is to have a modular Controller with a well published Northbound API for network applications to write towards while utilizing Southbound protocols such as OpenFlow to communicate with supported downstream network nodes. These functionalities can be acheived by OpenDaylight controller. Open Daylight Controller supports not only the OpenFlow protocol but also other open protocols to allow communication with devices which have OpenFlow elements. It also includes a Northbound API to allow a software which will work with the Controller in controlling the network. Architecture of OpenDaylight Controller:
The Open Daylight Controller is a pure software and as a JVM it can be run on any OS as long as it supports Java. The following picture shows the structure of the OpenDaylight Controller.

The Controller exposes open Northbound APIs which are used by Applications.We support the OSGi framework and bidirectional REST for the Northbound API. OSGi framework is used for applications that will run in the same address space as the Controller while the REST (web based) API is used for Apps that do not run in the same address space (or even the same metal) as the Controller. The business logic and algorithms reside in the Apps. These Apps use the Controller to gather network intelligence, runs its algorithm to do analytics and then use the Controller to orchestrate the new rules throughout the network.

OSGI Framework:

The OSGi framework allows dynamically linking plugins for the evolving southbound protocols. The SAL(Service Abstraction Layer) provides basic services like Device Discovery which are used by modules like Topology
Manager to build the topology and device capabilities. Services are constructed using the features exposed by the plugins (based on the presence of a plugin and capabilities of a network device). Based on the service request the SAL maps to the appropriate plugin and thus uses the most appropriate Southbound protocol to interact with a given network device.
Data Packet services in OpenDaylight controller consist of:
•Topology Service is a set of services that allow to convey topology information like a new node a new link has been discovered.
•Flow Programming service is supposed to provide the necessary logic to program in the different agents a Match/Actions rule.
•Statistics service of Data packet in OpenDaylight consist of 
  *Flow
  *Node Connector.
  *Queue.

OpenDaylight Controller(GUI):

The GUI is implemented as an APP and uses the NB REST API to interact with the other modules of the controller. This architecture thus ensures that whatever is possible with the GUI is also available via REST API and thus the Controller can be integrated easily into other management or orchestration systems. The OpenFlow enabled Switches connect to two or more instances of the Controller via persistent point-to-point TCP/IP connection. On the northbound side the interaction between the controller and the applications is done via RESTful webservices for all the Request-Response type of interaction, being those based on HTTP and being HTTP based on non-persistent connections between the server and the client, it's possible to leverage all the high-available techniques used to give resilience on the WEB, like:
The Open Daylight Controller supports a Cluster based High Availability model. There are several instances of the Open Daylight Controller which logically act as one logical controller. This not only gives a fine grain redundancy but also allows a scale-out model for linear scalability. The OpenFlow enabled Switches connect to two or more instances of the Controller via persistent point-to-point TCP/IP connection. On the northbound side the interaction between the controller and the applications is done via RESTful webservices for all the Request-Response type of interaction, being those based on HTTP and being HTTP based on non-persistent connections between the server and the client, it's possible to leverage all the high-available techniques used to give resilience on the WEB. 

Rest API's used in OpenDaylight are:
•Topology REST APIs
•Host Tracker REST API's
•Flow Programmer REST API's
•Static Routing REST API's
•Statistics REST API's
•Subnets REST API's
•Switch Manager REST API's
•Container Manager REST API's
•Connection Manager REST API's
All REST API's in OpenDaylight provides HTTP authentication for Local users created on the Controller. The Local user creation can only be done via the web graphical user interface and these users can be given authorization to handle one or more slices. The username/password created for an individual user on the web graphical user interface can be used over the REST API to access relevant resources.

OpenDaylight Controller Set Up From CLI:
OpenDaylight controller can be pulled from CLI by using following commands:
• git clone ssh://<username>@git.opendaylight.org:29418/controller.git
This Command pulls the OpenDaylight respository.
PreRequisites for OpenDaylight setup:
• Maven 3.04 or greater(Check the version of by using command mvn
-v).
• JVM 1.7+(Set environment variables).
Run the command – cd opendaylight/distrubution/opendaylight/
maven install.
Find the controller - ls target/distribution.opendaylight-0.1.0-SNAPSHOT-osgipackage.zip.
Run the controller cd controller/opendaylight/distrubution/opendaylight/target/distrubution.opendaylight-osgipackage/opendaylight/./run.sh
After running this command, web interface of ODL can be visible at 8080 port as:
OpenDaylight Using Python:
OpenDaylight supports Northbound API to write the test case using python.
Combining Rest and mininet API's calls with ODL Rest API's could be a powerful tool for network application
Here is the sample script which talks about how to leverage Mininet and ODL API calls:
• First create a class for to define topology
class SingleSwitchTopo(Topo):
"Single switch connected to n hosts."
def __init__(self, n=2, **opts):
# Initialize topology and default options
Topo.__init__(self, **opts)
# mininet/ovswitch does not want ':'s in the dpid
switch_id = SWITCH_1.translate(None, ':')
switch = self.addSwitch('s1', dpid=switch_id)
for h in range(n):
host = self.addHost('h%s' % (h + 1))
self.addLink(host, switch)
• Next set up the Mininet network:
def setup_mininet_simpleTest():
"Create and test a simple network"
topo = SingleSwitchTopo(n=4)
#net = Mininet(topo)
net = Mininet( topo=topo, controller=lambda name: RemoteController(
name, ip=CONTROLLER ) )
net.start()
Finally set up the complete test which uses API's calls of ODL, Mininet. Here
is the sample test script.
class TestSequenceFunctions(unittest.TestCase):
"""Tests for OpenDaylight
At this point, tests for OpenDaylightFlow and OpenDaylightNode
are intermingled. These could be seperated out into seperate
suites.
"""
def setUp(self):
odl = OpenDaylight()
odl.setup['hostname'] = CONTROLLER
odl.setup['username'] = USERNAME
odl.setup['password'] = PASSWORD
self.flow = OpenDaylightFlow(odl)
self.node = OpenDaylightNode(odl)
self.switch_id_1 = SWITCH_1
self.odl_test_flow_1 = {u'actions': u'DROP',
u'etherType': u'0x800',
u'ingressPort': u'1',
u'installInHw': u'true',
u'name': u'odl-test-flow1',
u'node': {u'@id': self.switch_id_1, u'@type': u'OF'},
u'priority': u'500'}
self.odl_test_flow_2 = {u'actions': u'DROP',
u'etherType': u'0x800',
u'ingressPort': u'2',
u'installInHw': u'true',
u'name': u'odl-test-flow2',
u'node': {u'@id': self.switch_id_1, u'@type': u'OF'},
u'priority': u'500'}
def test_01_delete_flows(self):
"""Clean up from any previous test run, just delete these
flows if they exist.
"""
try:
self.flow.delete(self.odl_test_flow_1['node']['@id'],
self.odl_test_flow_1['name'])
except:
pass
try:
self.flow.delete(self.odl_test_flow_2['node']['@id'],
self.odl_test_flow_2['name'])
except:
pass
Using ODL REST API's calls in Python:
To use ODL REST API integration to get the statistics to generate a traffic details, this can be acheived by the statistic Rest API's.
h = httplib2.Http(".cache")
h.add_credentials('admin', 'admin')
resp,
content
=h.request('http://10.55.17.20:8080/controller/nb/v2/statistics/default/flow',"GET")
allFlowStats = json.loads(content)
flowStats = allFlowStats['flowStatistics']
for fs in flowStats:
print "\nSwitch ID : " + fs['node']['@id']
print '{0:8} {1:8} {2:5} {3:15}'.format('Count', 'Action', 'Port', 'DestIP')
for aFlow in fs['flowStat']:
count = aFlow['packetCount']
actions = aFlow['flow']['actions']
actionType = ''
actionPort = ''
#print actions
if(type(actions) == type(list())):
actionType = actions[1]['@type']
actionPort = actions[1]['port']['@id']
else:
actionType = actions['@type']
actionPort = actions['port']['@id']
dst = aFlow['flow']['match']['matchField'][0]['value']
print
actionPort, dst)
'{0:8}
{1:8}
{2:5}
{3:15}'.format(count,
actionType,
OpenDaylight with TestON:
To access the functionality of OpenDaylight controller in TestON, create a python file which will act as library for openDaylight controller and from this library the user interact to the ODL functions and REST API's. Here is the sample script which demonstrate the working of ODL library.
from __future__ import print_function
import json
import requests
from requests.auth import HTTPBasicAuth
class OpenDaylight(object):
"""
An object holding details to talk to the OpenDaylight REST API
"""
def __init__(self):
"""Set some mostly reasonable defaults.
"""
self.setup = {'hostname':'localhost',
'port':'8080',
'username':'admin',
'password':'admin',
'path':'/controller/nb/v2/',
'container':'default',
'http':'http://'}
self._base_url = None
self.url = None
self.auth = None
The above sample script will connect to the OpenDaylight web Interface.
def prepare_url(self, app, path):
# the base url we will use for the connection
self._base_url = self.setup['http'] + self.setup['hostname'] + ':' + \
self.setup['port'] + self.setup['path']
# the specific path we are building
self.url = self._base_url + app + '/' + self.setup['container'] + path
Above function build the URL for this REST connection which is then stored as
OpenDaylight.url
. The argument 'app' is used to connect to the northbound API. 'path'
argument take specific rest query.
OpenDaylight driver in Test contains list of functions used to perform ODL
functions. For example, add flow, delete flow etc.
def deleteflows(self):
self.flow.delete(self.odl_test_flow_1['node']['@id'],
self.odl_test_flow_1['name'])
self.flow.delete(self.odl_test_flow_2['node']['@id'],
self.odl_test_flow_2['name'])
return main.TRUE
def addflows(self):
self.flow.add(self.odl_test_flow_1)
self.flow.add(self.odl_test_flow_2)
return main.TRUE
def getflows(self):
self.flow.get(node_id=self.switch_id_1, flow_name='odl-test-flow1')
return main.TRUE
In OSPK script we need to include the action what we have used in the .py file
CASE 1
NAME "Delete and add flows in Odl controller"
STEP "Delete and add flows in Odl controller using deleteflows and addflows"
STORE ON Odl DO deleteflows IN result
ASSERT result EQUALS main.TRUE ONPASS "Deleted flows successfully" ONFAIL "Unsuccessfull"
STORE ON Odl DO addflows IN result
ASSERT result EQUALS main.TRUE ONPASS "Addflows successfully" ONFAIL "Unsuccessfull"
STORE ON Odl DO getflows IN result
ASSERT result EQUALS main.TRUE ONPASS "getflows successfully" ONFAIL "Unsuccessfull"
